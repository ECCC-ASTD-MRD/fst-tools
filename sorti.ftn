*
***S/P SORTI   IDENTIFICATION DU FICHIER..OUVRIR FICHIER...RESERVER MEMOIRE
*
      subroutine sorti( modx, norecs, jwrit)


      implicit none


      external fnom,memoir,fstnbr,fsteof,fstouv,pgsmabt,fstvoi,fstapp,messags
      external fstabt, fstlnk, exfin, pgsmof
      integer  fnom,fstnbr,fsteof,fstouv,fstvoi,fstapp,exfin,pgsmof
*
*AUTEUR P. SARRAZIN DEC 81 DRPN DORVAL P.Q. CANADA
*
*LANGAGE RATFOR
*
*OBJET(SORTI)
*          VERIFIER LA VALEUR DE MODX  RESERVER MEMOIRE, OUVRIR FICHIER
*            MODX=1 FICHIER STANDARD
*                 2 FICHIER ACCES DIRECT (READMS) 
*                 3 FICHIER SEQUENTIEL
*                 4 FICHIER SEQUENTIEL AVEC PARAMETRES DE FSTECR
*
*LIBRAIRIES
*         -SOURCE  ARMNSRC,DRPN
*         -OBJET   PGSMLIB,ID=ARMNPJS.
*
*ARGUMENTS
*  IN      MODX      1=FICHIER STANDARD 
*                    2=FICHIER DIRECT (READMS)
*                    3=FICHIER SEQUENTIEL
*
*  IN     NOENRG     NOMBRE D'ENREGISTREMENT DANS FICHIER
*  IN      JWRIT     -1=REECRIRE SUR FICHIER OU ECRIRE A LA FIN(MS) SORTI(MS,500,A)
*                    -1=ECRIRE SUR FICHIER UN RECORD SANS DETRUIRE UN 
*                       RECORD PAREIL   SORTI(STD,500,A)
*                    +1=REECRIRE SUR FICHIER FATAL SI RECORD PAS LA.   SORTI(MS,500,R)
*                    +1=REMPLACE UN RECORD SI DEJA EXISTANT DETRUIT   SORTI(STD,500,R)
*
*IMPLICITES
*
*MESSAGES 
*         DEUXIEME APPEL A LA DIRECTIVE SORTIE APPEL IGNORE 
*         MAUVAIS APPEL A DIRECTIVE SORTIE FICHIER STD
*         MAUVAISE DIRECTIVE (SORTIE) FICHIER MS
*         DIRECTIVE ENREG=0, INITIALISER A 1
*         MAUVAIS APPEL A SORTIE FICHIER SEQ
*         TYPE DE FICHIER INCONNU
*         MAUVAISE DIRECTIVE MODE DIFFERENT DE (STD,MS,SEQ) 
*
*
*----------------------------------------------------------------------
*
*
#include "lnkflds.cdk"
#include "llccmm.cdk"
#include "accum.cdk"
#include "charac.cdk"
#include "dates.cdk"
#include "indptr.cdk"
#include "enrege.cdk"
#include "voir.cdk"
*
      integer i,jwrit,modx,norecs
      common/relu/dejalue
      logical dejalue
      data dejalue/.false./
*     
*   DATE DE LA RUN OPERATIONNELLE UTILISEE PAR L'USAGER DIRECTIVE OPDAT=OUI
*     
      if (lfn(6).ne. 'NON') then
         if (seldat) date = jdate
         if (seldat) write(6,*)' DATE ORIGINE = DATE VALIDE DATE=',date
      endif
*     
      if (dejalue)  then
         if (message) then
            write(6,*)
     $           'DEUXIEME APPEL A LA DIRECTIVE SORTIE APPEL IGNORE'
            return
         endif
      endif
      dejalue=.true.
*     
      mode = modx
      noenrg = norecs
*     
*     NBR1 = MAX0(2,FSTNBR(1))
*     
*      ier = fstnbr(1)
*      if (ier .lt. 0) call fstabt
*
*   LE FICHIER D ENTRE NE PEUT ETRE  FICHIER STANDARD SEQUENTIEL
*
      iset = 0  
*
*  RESERVER MEMOIR POUR FICHIER D ENTRE 
*
*     
      if (mode.eq.1)  then
         if (noenrg.eq.1) then
            ier=fnom(2,lfn(41),'STD+SEQ+FTN',0)
         else if (noenrg.eq.0) then
            ier=fnom(2,lfn(41),'STD+SEQ',0)
         else
            ier = fnom(2,lfn(41),'STD+RND',0)

            if (nsort.eq.2) then
               iwrit=+1 
            else if (nsort.eq.3) then
               iwrit=jwrit
            else 
               write(6,*)
     $              'MAUVAIS APPEL A DIRECTIVE SORTIE FICHIER STD'
               call pgsmabt
            endif
         endif
      else if (mode.eq.2) then
         write(6,*)
     $        ' LES FICHIERS "MS" NE SONT PAS SUPPORTES DANS CETTE'
         write(6,*)         ' VERSION DE PGSM'
         call pgsmabt 
      else if (mode.eq.3.or.mode.eq.4) then
         ier = fnom(2,lfn(41),'SEQ+FTN+UNF',0)
         
         if (nsort.ne.1)  then
            write(6,*)'MAUVAIS APPEL A SORTIE FICHIER SEQ'
            call pgsmabt
         endif
      else if (mode.eq.5) then
         if (jwrit.eq.-1) then
            ier = pgsmof(2,lfn(41))
*            ier = fnom(2,lfn(41),'SEQ+FMT+APPEND',0)
         else
            ier = pgsmof(2,lfn(41))
            ier = fnom(2,lfn(41),'SEQ+FMT+R/W',0)
         endif
      else  
         if (message) write(6,*)'TYPE DE FICHIER INCONNU'
         if (message) write(6,*)
     $        ' MAUVAISE DIRECTIVE MODE DIFFERENT DE (STD,MS,SEQ)'
         return
      endif
*     
*
      if (mode.eq.2) then
         write(6,*)
     $  'LES FICHIERS "MS" NE SONT PLUS SUPPORTES SUR LES CYBER-910-920'
         call pgsmabt
      endif

      if (mode.eq.1)  then
         if (noenrg.eq.1)  then
            ier = fstouv(2, 'SEQ+FTN')
         else if (noenrg.eq.0) then
            ier = fstouv(2, 'SEQ')
            if (jwrit.eq.-1) then
               ier = fstapp(2,' ')
               ier = fsteof(2)
               print *, 'fsteof retourne', ier
            endif
         else
            ier = fstouv(2, 'RND') 
         endif
      endif
*
*   OUVRIR FICHIER D'ENTREE STANDARD

      if (inputmod.eq.SEQUENTIEL) then
         ier = fstouv(lnkdiun(1), 'SEQ')
      else
      do i=1,niun
         ier = fstouv(lnkdiun(i), 'RND+R/O+OLD')
         if (ier .lt. 0) then
            print *, '************************************************'
            print *, 
     $           '* LE FICHIER #',lfn(i), 'N''EST PAS STANDARD RANDOM'
            print *, '*************************************************'
            jdate= exfin('  PGSM  ', 'ABORT' , 'NON')
            call qqexit(13)
         endif
      enddo
      
      call fstlnk(lnkdiun,niun)
      endif

      if (voire) then
         if (message) then
            do i=1,niun
               ier = fstvoi(lnkdiun(i), 'RND')
            enddo
         endif
      endif
*
      return 
      end
